<?xml version='1.0' encoding='utf-8'?>
<scriptlibrary name='CommonUtils' xmlns='http://www.lotus.com/dxl' version='9.0'
 maintenanceversion='1.0' replicaid='85258288000D10AA' hide='v3 v4strict'
 designerversion='8.5.3'>
<noteinfo noteid='2c6' unid='46A27CE6FD34457785257D3400457189' sequence='31'>
<created><datetime dst='true'>20140814T083830,49-04</datetime></created>
<modified><datetime dst='true'>20180508T222245,57-04</datetime></modified>
<revised><datetime dst='true'>20150430T140134,64-04</datetime></revised>
<lastaccessed><datetime dst='true'>20180508T222245,57-04</datetime></lastaccessed>
<addedtofile><datetime dst='true'>20180508T222245,57-04</datetime></addedtofile></noteinfo>
<updatedby><name>CN=Gregory L Washington/OU=AJ/O=ARMYJAGC</name><name>CN=JAGC Admin/OU=AJ/O=ARMYJAGC</name><name
>CN=Gregory L Washington/OU=AJ/O=ARMYJAGC</name></updatedby>
<wassignedby><name>CN=Gregory L Washington/OU=AJ/O=ARMYJAGC</name></wassignedby><code
 event='library'><javaproject class='JavaAgent.class' codepath='c:\Program Files (x86)\IBM\Lotus\Notes\Data'><java
 name='mil/army/us/common/utils/DateUtils.java'>package mil.army.us.common.utils;

//import additional libraries
import java.util.GregorianCalendar;
import java.util.Calendar;
import java.text.DateFormat;

public class DateUtils {
	/**
	   * A method to get the last day of a month
	   *
	   * @param year  the four digit year
	   * @param month the two digit month
	   *
	   * @return      the last day of the specified month
	   */
	  public static String getMonthLastDay(String year, String month) {
	  
	    // get a calendar object
	    GregorianCalendar calendar = new GregorianCalendar();
	    
	    // convert the year and month to integers
	    int yearInt = Integer.parseInt(year);
	    int monthInt = Integer.parseInt(month);
	    
	    // adjust the month for a zero based index
	    monthInt = monthInt - 1;
	    
	    // set the date of the calendar to the date provided
	    calendar.set(yearInt, monthInt, 1);
	    
	    int dayInt = calendar.getActualMaximum(GregorianCalendar.DAY_OF_MONTH);
	    
	    return Integer.toString(dayInt);
	  } // end getLastDay method
	  
	  /**
	   * A method to get the string representation of month
	   *
	   * @param month  as int	   
	   *
	   * @return      the last day of the specified month
	   */
	  public static String getMonthString(int month){
		  String strArrayMonths[] = {"January","February","March","April","May","June","July","August","September","October","November","December"};
		  int index = month-1; 
		  if(index &lt;= strArrayMonths.length){
			  return strArrayMonths[index];
		  }else{
			  return "Invalid month";
		  }	  
	  }
	  
	  /**
	   * A method to get the string representation of month
	   *
	   * @param month the two digit month	   
	   *
	   * @return      the last day of the specified month
	   */
	  public static String getMonthString(String month){
		  String strArrayMonths[] = {"January","February","March","April","May","June","July","August","September","October","November","December"};
		  int monthInt = Integer.parseInt(month);
		  int index = monthInt-1; 
		  if(index &lt;= strArrayMonths.length){
			  return strArrayMonths[index];
		  }else{
			  return "Invalid month";
		  }	  
	  }
	  
}
</java><java name='mil/army/us/common/utils/Paragraph.java'>package mil.army.us.common.utils;



import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import org.apache.pdfbox.pdmodel.font.PDType1Font;

public class Paragraph {
	/** position X */
	   private float x;

	   /** position Y */
	   private float y;

	   /** width of this paragraph */
	   private int width = 500;

	   /** text to write */
	   private String text;

	   /** font to use */
	   private PDType1Font font = PDType1Font.HELVETICA;

	   /** font size to use */
	   private int fontSize = 10;

	   private int color = 0;

	   public Paragraph(float x, float y, String text) {
	       this.x = x;
	       this.y = y;
	       this.text = text;
	   }

	   /**
	    * Break the text in lines
	    * @return
	    */
	   public List&lt;String&gt; getLines() throws IOException {
	       List&lt;String&gt; result = new ArrayList&lt;String&gt;();

	       String[] split = text.split("(?&lt;=\\W)");
	       int[] possibleWrapPoints = new int[split.length];
	       possibleWrapPoints[0] = split[0].length();
	       for ( int i = 1 ; i &lt; split.length ; i++ ) {
	           possibleWrapPoints[i] = possibleWrapPoints[i-1] + split[i].length();
	       }

	       int start = 0;
	       int end = 0;
	       for ( int i : possibleWrapPoints ) {
	           float width = font.getStringWidth(text.substring(start,i)) / 1000 * fontSize;
	           if ( start &lt; end &amp;&amp; width &gt; this.width ) {
	               result.add(text.substring(start,end));
	               start = end;
	           }
	           end = i;
	       }
	       // Last piece of text
	       result.add(text.substring(start));
	       return result;
	   }

	   public float getFontHeight() {
	       return font.getFontDescriptor().getFontBoundingBox().getHeight() / 1000 * fontSize;
	   }

	   public Paragraph withWidth(int width) {
	       this.width = width;
	       return this;
	   }

	   public Paragraph withFont(PDType1Font font, int fontSize) {
	       this.font = font;
	       this.fontSize = fontSize;
	       return this;
	   }

	   public Paragraph withColor(int color) {
	       this.color = color;
	       return this;
	   }

	   public int getColor() {
	       return color;
	   }

	   public float getX() {
	       return x;
	   }

	   public float getY() {
	       return y;
	   }

	   public int getWidth() {
	       return width;
	   }

	   public String getText() {
	       return text;
	   }

	   public PDType1Font getFont() {
	       return font;
	   }

	   public int getFontSize() {
	       return fontSize;
	   }

}
</java><java name='mil/army/us/common/utils/PdfGenerationEngine.java'>package mil.army.us.common.utils;

import java.io.IOException;
import java.util.ArrayList;

import org.apache.pdfbox.exceptions.COSVisitorException;
import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.pdmodel.PDPage;
import org.apache.pdfbox.pdmodel.edit.PDPageContentStream;
import org.apache.pdfbox.pdmodel.font.PDFont;
import org.apache.pdfbox.pdmodel.font.PDType1Font;

public class PdfGenerationEngine {
	//private ArrayList&lt;String&gt; arrayList;
	private PDDocument document;
	private PDPage page;
	private PDFont font = PDType1Font.COURIER;
	private int fontSize = 10;
	private int maxTextWidth = 80;
	private int totalLinePerPage;
	private int totalLinePerPageUsed;
	private float xCurrent = 0;
	private float yCurrent = 0;
	private boolean isNewPage = false;
	public PdfGenerationEngine ()throws COSVisitorException, IOException{
		this.document = new PDDocument();
		this.page= new PDPage();
   	  	this.page.setMediaBox(PDPage.PAGE_SIZE_LETTER);
   	  	document.addPage( this.page );
   	  	isNewPage = true;
	}
	
	public PdfGenerationEngine (PDDocument document)throws COSVisitorException, IOException{
		this.document = document;
		this.page= new PDPage();
   	  	this.page.setMediaBox(PDPage.PAGE_SIZE_LETTER);
   	  	document.addPage( this.page );
   	  	isNewPage = true;
	}
	
	public void writeText(ArrayList&lt;String&gt; arrayList, int positionX, float positionY, PDFont font) throws IOException, COSVisitorException {
		PDPageContentStream contentStream = null;
		float textHeight = 0;
		
		if(this.page == null){
	    	  this.page= new PDPage();
	    	  page.setMediaBox(PDPage.PAGE_SIZE_LETTER);
	    	  document.addPage( page );
	    	  isNewPage = true;
	      }
	     // Start a new content stream
	     contentStream = new PDPageContentStream(this.document, this.page);
	     textHeight = (font.getFontDescriptor().getFontBoundingBox().getHeight() / 1000) * fontSize; 
	     // Define a text content stream using the selected font, moving the cursor and drawing the text in arrayList
	     for(int i=0; i &lt; arrayList.size(); i++) {  
	         String text=(String) arrayList.get(i);
	         String [] tmpText = splitString(text);
	         for( int k=0; k&lt;tmpText.length; k++) {
	             contentStream.beginText();
	             contentStream.setFont(font, fontSize);
	             contentStream.moveTextPositionByAmount(positionX, positionY);
	             contentStream.drawString(tmpText[k]);           
	             contentStream.endText();
	             this.totalLinePerPageUsed = this.totalLinePerPageUsed + 1;
	             positionY = positionY-textHeight;
	             setYCurrent(positionY);
	         }           
	         contentStream.setLineWidth((float) 0.25);
	     }

	     // Make sure that the content stream is closed:
	     contentStream.close();      
	    
	 } //main
	
	public void writeCenteredTitle(String title, int marginTop, float yText ) throws IOException{
		PDPageContentStream contentStream;
		float titleWidth = 0;
		float titleHeight = 0;
		float xText = 0;
		
		
		if(this.page == null){
	    	  this.page= new PDPage();
	    	  page.setMediaBox(PDPage.PAGE_SIZE_LETTER);
	    	  document.addPage( page );
	    	  isNewPage = true;
	      }
		contentStream = new PDPageContentStream(this.document, this.page);
		
		titleWidth = this.font.getStringWidth(title) / 1000 * this.fontSize;
        titleHeight = (this.font.getFontDescriptor().getFontBoundingBox().getHeight() / 1000) * fontSize;        
        xText = (this.page.getMediaBox().getWidth() - titleWidth) / 2;
        //yText = this.page.getMediaBox().getHeight() - marginTop - titleHeight;
        contentStream.beginText();
        contentStream.setFont( font, fontSize );        
        contentStream.moveTextPositionByAmount(xText, yText);
        contentStream.drawString(title);        
        contentStream.endText(); 
        this.totalLinePerPageUsed = this.totalLinePerPageUsed + (int)Math.ceil(marginTop/titleHeight) + 1;
        setYCurrent(yText -  titleHeight);
        contentStream.setLineWidth((float) 0.25);
	}
	
	private String [] splitString(String text) {
	     /* pdfBox doesnt support linebreaks. Therefore, following steps are requierd to automatically put linebreaks in the pdf
	      * 1) split each word in string that has to be linefeded and put them into an array of string, e.g. String [] parts
	      * 2) create an array of stringbuffer with (textlength/(number of characters in a line)), e.g. 280/70=5 &gt;&gt; we need 5 linebreaks!
	      * 3) put the parts into the stringbuffer[i], until the limit of maximum number of characters in a line is allowed,
	      * 4) loop until stringbuffer.length &lt; linebreaks
	      * 
	      */
	     int linebreaks=text.length()/maxTextWidth; //how many linebreaks do I need?  
	     String [] newText = new String[linebreaks+1];       
	     String tmpText = text;
	     String [] parts = tmpText.split(" "); //save each word into an array-element

	     //split each word in String into a an array of String text. 
	     StringBuffer [] stringBuffer = new StringBuffer[linebreaks+1]; //StringBuffer is necessary because of manipulating text
	     int i=0; //initialize counter 
	     int totalTextLength=0;
	     for(int k=0; k&lt;linebreaks+1;k++) {
	         stringBuffer[k] = new StringBuffer();
	         while(true) {               
	             if (i&gt;=parts.length) break; //avoid NullPointerException
	             totalTextLength=totalTextLength+parts[i].length(); //count each word in String              
	             if (totalTextLength&gt;maxTextWidth) break; //put each word in a stringbuffer until string length is &gt;80
	             stringBuffer[k].append(parts[i]);
	             stringBuffer[k].append(" ");
	             i++;
	         }
	         //reset counter, save linebreaked text into the array, finally convert it to a string 
	         totalTextLength=0; 
	         newText[k] = stringBuffer[k].toString();
	     }
	     return newText;
	 }
	
	public void saveDocument(String filePath, String fileName) throws COSVisitorException, IOException{
		this.document.save( filePath + fileName);
	    this.document.close();
	}
	
	public void setDocument(PDDocument document) {
		this.document = document;
	}
	
	public void setPage(PDPage page) {
		this.page= new PDPage();
   	  	page.setMediaBox(PDPage.PAGE_SIZE_LETTER);
   	  	this.document.addPage( page );
   	  	this.isNewPage = true;
	}
	
	public void setFont(PDFont font) {
		this.font = font;
	}
	
	public void setFontSize(int fontSize) {
		this.fontSize = fontSize;
	}
	
	public void setTotalLinePerPage(int totalLinePerPage) {
		this.totalLinePerPage = totalLinePerPage;
	}
	
	public void setTotalLinePerPageUsed(int totalLinePerPageUsed) {
		this.totalLinePerPageUsed = totalLinePerPageUsed;
	} 

	public PDFont getFont() {
		return font;
	}
	
	public float getFontHeight() {
        return font.getFontDescriptor().getFontBoundingBox().getHeight() / 1000 * fontSize;
    }

	public int getTotalLinePerPage() {
		return totalLinePerPage;
	}

	public PDDocument getDocument() {
		return document;
	}

	public PDPage getPage() {
		return page;
	}
	
	public int getTotalLinePerPageUsed() {
		return totalLinePerPageUsed;
	}

	public void setXCurrent(float xCurrent) {
		this.xCurrent = xCurrent;
	}

	public float getXCurrent() {
		return xCurrent;
	}

	private void setYCurrent(float yCurrent) {
		this.yCurrent = yCurrent;
	}

	public float getYCurrent() {
		return yCurrent;
	}
	
	public float getPageMediaBoxHeight(){
		return this.page.getMediaBox().getHeight();
	}
	
	public float getPageMediaBoxWidth(){
		return this.page.getMediaBox().getWidth();
	}

	//public void setNewPage(boolean isNewPage) {
	//	this.isNewPage = isNewPage;
	//}

	public boolean isNewPage() {
		return isNewPage;
	}

	
	
	
	
	
	
	
	
	
	
}
</java></javaproject></code>
<item name='$JavaCompilerSource'><text>1.5</text></item>
<item name='$JavaCompilerTarget'><text>1.5</text></item>
<item name='$POID'><datetime dst='true'>20140828T095830,42-04</datetime></item></scriptlibrary>

