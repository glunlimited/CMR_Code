<?xml version='1.0' encoding='utf-8'?>
<agent name='(PublishResultsToDocx)' alias='(PublishResultsToDocx)' xmlns='http://www.lotus.com/dxl'
 version='9.0' maintenanceversion='1.0' replicaid='85258288000D10AA' hide='v3'
 publicaccess='false' designerversion='8.5.3' runonbehalfof='CN=JAGC Admin/OU=AJ/O=ARMYJAGC'
 restrictions='fulladminunrestricted'>
<noteinfo noteid='2b6' unid='5059A6F0FF53D26E85257E350061DB36' sequence='3'>
<created><datetime dst='true'>20150428T134851,10-04</datetime></created>
<modified><datetime dst='true'>20180508T222245,53-04</datetime></modified>
<revised><datetime dst='true'>20150430T140135,42-04</datetime></revised>
<lastaccessed><datetime dst='true'>20180508T222245,53-04</datetime></lastaccessed>
<addedtofile><datetime dst='true'>20180508T222245,53-04</datetime></addedtofile></noteinfo>
<updatedby><name>CN=Gregory L Washington/OU=AJ/O=ARMYJAGC</name></updatedby>
<wassignedby><name>CN=Gregory L Washington/OU=AJ/O=ARMYJAGC</name></wassignedby>
<designchange><datetime dst='true'>20150430T140136,17-04</datetime></designchange>
<trigger type='agentlist'/>
<documentset type='runonce'/><code event='action'><javaproject class='JavaAgent.class'
 codepath='c:\Program Files (x86)\IBM\Lotus\Notes\Data'><java name='JavaAgent.java'>import lotus.domino.*;

import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.File;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Vector;

import org.apache.poi.xwpf.usermodel.LineSpacingRule;
import org.apache.poi.xwpf.usermodel.TextAlignment;
import org.apache.poi.xwpf.usermodel.XWPFDocument;
import org.apache.poi.xwpf.usermodel.ParagraphAlignment;
import org.apache.poi.xwpf.usermodel.XWPFParagraph;
import org.apache.poi.xwpf.usermodel.XWPFRun;

public class JavaAgent extends AgentBase {
	final String FILEPATH = "E:\\Applications\\PDFbox\\";

	Session session = null;
	AgentContext agentContext = null;
	Agent agent = null;
	Database dbThis = null;

	public void NotesMain() {
		View keywords = null;
		Document template = null;
		XWPFDocument document= null;		
		EmbeddedObject eo = null;
		File docFile = null;
		FileInputStream fis = null;
		ArrayList arrayList = null;
		String fileName = null;
		String fullFilePath = null;
		Item itemFile = null;
		try {
			session = getSession();
			agentContext = session.getAgentContext();
			agent = agentContext.getCurrentAgent();
			dbThis = agentContext.getCurrentDatabase();
			keywords = dbThis.getView("vwKeywords");
			template = keywords.getDocumentByKey("CMPBlankReportTemplate", true);			
			fileName = new SimpleDateFormat("'Report_'yyyyMMddhhmm'.docx'").format(new Date());
			fullFilePath = FILEPATH + fileName;
			arrayList = new ArrayList();
			if (template.hasEmbedded()){
				//System.out.println("Template has embedded.");
				itemFile = template.getFirstItem("$FILE");
				eo = (EmbeddedObject)template.getAttachment(itemFile.getValueString());
				eo.extractFile(fullFilePath);
				docFile = new File(fullFilePath);
				if (!docFile.exists()) {
					throw new FileNotFoundException("The Word dcoument " +
					fullFilePath +
					" does not exist.");
				}
				fis = new FileInputStream(docFile);					 
				document= new XWPFDocument(fis);
				//System.out.println("Using the template.");
							 
			}
			if(document == null){
				document= new XWPFDocument();
				//System.out.println("Not using the template.");
			}
			Document docAgentParams = dbThis.getDocumentByID(agent.getParameterDocID());
			arrayList = getLineItemData(docAgentParams);
			arrayList.add("CENTER¥------------------------------------ END OF REPORT ------------------------------------");
			new generateWordDocx(document, arrayList, fileName);
			attachDocxToDocument(fileName ,docAgentParams.getItemValueString("UserName"));
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public class generateWordDocx{
		private ArrayList classArrayList;
		private XWPFDocument classDocument;


		generateWordDocx(XWPFDocument document, ArrayList arrayList,  String filename )
		throws IOException {
			this.classDocument = document;
			this.classArrayList = arrayList;

			writeText(classDocument, classArrayList, filename);		
		}

		public void writeText(XWPFDocument document, ArrayList arrayList,
				String filename) throws IOException {
			String[] record;
			String metaData;
			String textData;
			String rawText;
			XWPFParagraph para = null;
			XWPFRun paraRun = null;	

			try {
				for (int i = 0; i &lt; arrayList.size(); i++) {
					rawText = (String) arrayList.get(i);
					record = rawText.split("¥");
					metaData=record[0];
					textData=record[1];
					if (metaData.equals("CENTERHEAD")) {
						para = document.createParagraph();
						para.setAlignment(ParagraphAlignment.CENTER);
						para.setVerticalAlignment(TextAlignment.TOP);
						para.setSpacingBefore(25);
						para.setSpacingAfter(0);
						paraRun = para.createRun();
						paraRun.setBold(true);
						paraRun.setFontFamily("Arial");
						paraRun.setFontSize(12);
						paraRun.setText(textData);
						paraRun.addCarriageReturn();

					} else if (metaData.equals("CENTER")) {
						para = document.createParagraph();
						para.setAlignment(ParagraphAlignment.CENTER);
						para.setVerticalAlignment(TextAlignment.TOP);
						para.setSpacingBefore(55);
						para.setSpacingAfter(0);
						paraRun = para.createRun();
						paraRun.setBold(true);
						paraRun.setFontFamily("Arial");
						paraRun.setFontSize(12);
						paraRun.setText(textData);
						paraRun.addCarriageReturn();
					} else if (metaData.equals("PARAGRAPH")) {
						para = document.createParagraph();
						para.setSpacingBefore(55);
						para.setSpacingAfter(0);
						para.setWordWrap(true);			        
						para.setAlignment(ParagraphAlignment.BOTH);
						para.setSpacingLineRule(LineSpacingRule.EXACT);	      
						para.setIndentationLeft(5);
						para.setIndentationRight(5);

						paraRun = para.createRun();
						paraRun.setBold(false);
						paraRun.setFontFamily("Arial");
						paraRun.setFontSize(12);
						paraRun.setText(textData);
						paraRun.addCarriageReturn();
					} 
				}
				//addFooter(document);

			} catch (Exception e) {
				e.printStackTrace();
			}
			FileOutputStream out = new FileOutputStream(FILEPATH + filename);
			document.write(out);
			out.close();


		}
	}
	public void attachDocxToDocument(String fileName, String publishedBy) {
		Document docPublish;
		String fullFilePath = FILEPATH + fileName;
		File file;
		try {
			docPublish = dbThis.createDocument();
			docPublish.appendItemValue("Form", "CMPublished");
			docPublish.appendItemValue("PublishedBy", publishedBy);
			RichTextItem body = docPublish.createRichTextItem("Body");
			body.embedObject(EmbeddedObject.EMBED_ATTACHMENT, null,
					fullFilePath, fileName);
			if (docPublish.save(true, false, true)) {
				file = new File(fullFilePath);
				if (file.delete()) {
				} else {
				}
			}

		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public ArrayList getLineItemData(Document docParams) {
		final String TITLE1 = "Summarized Report of Results of Trial";
		final String CIRCUIT1 = "1st judicial circuit";
		final String CIRCUIT2 = "2nd judicial circuit";
		final String CIRCUIT3 = "3rd judicial circuit";
		final String CIRCUIT4 = "4th judicial circuit";
		final String CIRCUIT5 = "5th judicial circuit";
		final String NO_TRIAL_MESSAGE = "No trials to report.";

		HashMap mpCircuitTitles=new HashMap();

		mpCircuitTitles.put(CIRCUIT1,"First Judicial Circuit");
		mpCircuitTitles.put(CIRCUIT2,"Second Judicial Circuit");
		mpCircuitTitles.put(CIRCUIT3,"Third Judicial Circuit");
		mpCircuitTitles.put(CIRCUIT4,"Fourth Judicial Circuit");
		mpCircuitTitles.put(CIRCUIT5,"Fifth Judicial Circuit");


		Document doc = null;
		ArrayList arrTextForPDF = null;
		ArrayList firstCircuit = null;
		ArrayList secondCircuit = null;
		ArrayList thirdCircuit = null;
		ArrayList fourthCircuit = null;
		ArrayList fifthCircuit = null;
		String txtRegion;

		try {

			Vector vctIDs = docParams.getItemValue("ids");

			for (int i = 0; i &lt; vctIDs.size(); i++) {
				doc = dbThis.getDocumentByID((String) vctIDs.get(i));
				txtRegion=doc.getItemValueString("Region").toLowerCase();
				if (txtRegion.equals(CIRCUIT1)) {
					if (firstCircuit == null) firstCircuit = new ArrayList();
					firstCircuit.add("PARAGRAPH¥" + doc.getItemValueString("ResultStatement"));
				}
				if (txtRegion.equals(CIRCUIT2)) {
					if (secondCircuit == null) secondCircuit = new ArrayList();
					secondCircuit.add("PARAGRAPH¥" + doc.getItemValueString("ResultStatement"));
				}
				if (txtRegion.equals(CIRCUIT3)) {
					if (thirdCircuit == null) thirdCircuit = new ArrayList();
					thirdCircuit.add("PARAGRAPH¥" + doc.getItemValueString("ResultStatement"));
				}

				if (txtRegion.equals(CIRCUIT4)) {
					if (fourthCircuit == null) fourthCircuit = new ArrayList();
					fourthCircuit.add("PARAGRAPH¥" + doc.getItemValueString("ResultStatement"));
				}
				if (txtRegion.equals(CIRCUIT5)) {
					if (fifthCircuit == null) fifthCircuit = new ArrayList();
					fifthCircuit.add("PARAGRAPH¥" + doc.getItemValueString("ResultStatement"));
				}
				doc.replaceItemValue("Status", "Published");
				doc.save();
				doc.recycle();
			}
			arrTextForPDF = new ArrayList();
			arrTextForPDF.add("CENTERHEAD¥" +TITLE1);
			arrTextForPDF.add("CENTER¥"+mpCircuitTitles.get(CIRCUIT1));
			if (firstCircuit == null) {
				arrTextForPDF.add("PARAGRAPH¥"+NO_TRIAL_MESSAGE);
			} else {
				for (int i = 0; i &lt; firstCircuit.size(); i++) {
					arrTextForPDF.add(firstCircuit.get(i));
				}
			}
			arrTextForPDF.add("CENTER¥"+mpCircuitTitles.get(CIRCUIT2));
			if (secondCircuit == null) {
				arrTextForPDF.add("PARAGRAPH¥"+NO_TRIAL_MESSAGE);
			} else {
				for (int i = 0; i &lt; secondCircuit.size(); i++) {
					arrTextForPDF.add(secondCircuit.get(i));
				}
			}
			arrTextForPDF.add("CENTER¥"+mpCircuitTitles.get(CIRCUIT3));
			if (thirdCircuit == null) {
				arrTextForPDF.add("PARAGRAPH¥"+NO_TRIAL_MESSAGE);
			} else {
				for (int i = 0; i &lt; thirdCircuit.size(); i++) {
					arrTextForPDF.add(thirdCircuit.get(i));
				}
			}
			arrTextForPDF.add("CENTER¥"+mpCircuitTitles.get(CIRCUIT4));

			if (fourthCircuit == null) {
				arrTextForPDF.add("PARAGRAPH¥"+NO_TRIAL_MESSAGE);
			} else {
				for (int i = 0; i &lt; fourthCircuit.size(); i++) {
					arrTextForPDF.add(fourthCircuit.get(i));
				}
			}
			arrTextForPDF.add("CENTER¥"+mpCircuitTitles.get(CIRCUIT5));
			if (fifthCircuit == null) {
				arrTextForPDF.add("PARAGRAPH¥"+NO_TRIAL_MESSAGE);
			} else {
				for (int i = 0; i &lt; fifthCircuit.size(); i++) {
					arrTextForPDF.add(fifthCircuit.get(i));
				}
			}


			return arrTextForPDF;
		} catch (Exception e) {
			return null;
		}
	}

	public String getDateTitleText() {
		String months[] = { "January", "February", "March", "April", "May",
				"June", "July", "August", "September", "October", "November",
		"December" };
		String dateTitle = "01 ";
		Calendar cal = Calendar.getInstance();
		int year = cal.get(Calendar.YEAR);
		int month = cal.get(Calendar.MONTH); // zero-based
		dateTitle = dateTitle + months[month] + year + " - "
		+ getDate(month, year) + " " + months[month] + year;
		return dateTitle;
	}

	private static String getDate(int month, int year) {
		Calendar dateCal = Calendar.getInstance();
		dateCal.set(year, month, 2);
		Integer maxDay = new Integer(dateCal
				.getActualMaximum(Calendar.DAY_OF_MONTH));
		return maxDay.toString();
	}
}</java></javaproject></code>
<rundata processeddocs='0' exitcode='0'>
<agentmodified><datetime dst='true'>20150428T133927,67-04</datetime></agentmodified></rundata>
<item name='$POID'><datetime dst='true'>20140828T095830,08-04</datetime></item>
<item name='$JavaCompilerSource'><text>1.3</text></item>
<item name='$JavaCompilerTarget'><text>1.2</text></item></agent>

